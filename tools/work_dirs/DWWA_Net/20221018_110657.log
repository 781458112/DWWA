2022-10-18 11:06:57,673 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Mar 29 2022, 02:18:16) [GCC 7.5.0]
CUDA available: True
GPU 0,1: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.4.r11.4/compiler.30033411_0
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.6.0
MMCV: 1.3.16
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.4
MMDetection: 2.18.0+
------------------------------------------------------------

2022-10-18 11:06:58,056 - mmdet - INFO - Distributed training: False
2022-10-18 11:06:58,412 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    backbone=dict(
        type='DWWA_Net',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=0,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        dcn=dict(type='DCN', deform_groups=1),
        stage_with_dcn=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048, 4096],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DWWA_Net',
            depth=50,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            pretrained='torchvision://resnet50',
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=20,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(
                type='SmoothL1Loss', beta=0.1111111111111111,
                loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='soft_nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1500, 1500), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1500, 1500),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1500, 1500), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1500, 1500),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1500, 1500),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=22000,
    warmup_ratio=0.001,
    step=[5, 7])
runner = dict(type='EpochBasedRunner', max_epochs=8)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/DWWA_Net'
gpu_ids = range(0, 1)

2022-10-18 11:07:03,454 - mmdet - INFO - Use load_from_torchvision loader
2022-10-18 11:07:03,721 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: xfm.h0_col, xfm.h1_col, xfm.h0_row, xfm.h1_row, conv2.weight, layer5.se1.fc.0.weight, layer5.se1.fc.3.weight, layer5.se2.fc.0.weight, layer5.se2.fc.3.weight, layer5.cv1.weight, layer5.cv1.conv_offset.weight, layer5.cv1.conv_offset.bias, layer5.cv2.weight, layer5.cv2.conv_offset.weight, layer5.cv2.conv_offset.bias, layer5.cv3.weight, layer5.cv3.conv_offset.weight, layer5.cv3.conv_offset.bias, layer5.cv5.weight, layer5.cv5.conv_offset.weight, layer5.cv5.conv_offset.bias, layer5.cv6.weight, layer5.cv6.conv_offset.weight, layer5.cv6.conv_offset.bias, layer5.switch.weight, layer5.switch.bias, layer5.xfm.h0_col, layer5.xfm.h1_col, layer5.xfm.h0_row, layer5.xfm.h1_row, layer1.0.cv3.weight, layer1.0.xfm.h0_col, layer1.0.xfm.h1_col, layer1.0.xfm.h0_row, layer1.0.xfm.h1_row, layer1.1.cv3.weight, layer1.1.xfm.h0_col, layer1.1.xfm.h1_col, layer1.1.xfm.h0_row, layer1.1.xfm.h1_row, layer1.2.cv3.weight, layer1.2.xfm.h0_col, layer1.2.xfm.h1_col, layer1.2.xfm.h0_row, layer1.2.xfm.h1_row, layer2.0.xfm.h0_col, layer2.0.xfm.h1_col, layer2.0.xfm.h0_row, layer2.0.xfm.h1_row, layer2.0.cv3.weight, layer2.0.cv3.conv_offset.weight, layer2.0.cv3.conv_offset.bias, layer2.1.conv2.conv_offset.weight, layer2.1.conv2.conv_offset.bias, layer2.1.cv3.weight, layer2.1.cv3.conv_offset.weight, layer2.1.cv3.conv_offset.bias, layer2.1.xfm.h0_col, layer2.1.xfm.h1_col, layer2.1.xfm.h0_row, layer2.1.xfm.h1_row, layer2.2.conv2.conv_offset.weight, layer2.2.conv2.conv_offset.bias, layer2.2.cv3.weight, layer2.2.cv3.conv_offset.weight, layer2.2.cv3.conv_offset.bias, layer2.2.xfm.h0_col, layer2.2.xfm.h1_col, layer2.2.xfm.h0_row, layer2.2.xfm.h1_row, layer2.3.conv2.conv_offset.weight, layer2.3.conv2.conv_offset.bias, layer2.3.cv3.weight, layer2.3.cv3.conv_offset.weight, layer2.3.cv3.conv_offset.bias, layer2.3.xfm.h0_col, layer2.3.xfm.h1_col, layer2.3.xfm.h0_row, layer2.3.xfm.h1_row, layer3.0.xfm.h0_col, layer3.0.xfm.h1_col, layer3.0.xfm.h0_row, layer3.0.xfm.h1_row, layer3.0.cv3.weight, layer3.0.cv3.conv_offset.weight, layer3.0.cv3.conv_offset.bias, layer3.1.conv2.conv_offset.weight, layer3.1.conv2.conv_offset.bias, layer3.1.cv3.weight, layer3.1.cv3.conv_offset.weight, layer3.1.cv3.conv_offset.bias, layer3.1.xfm.h0_col, layer3.1.xfm.h1_col, layer3.1.xfm.h0_row, layer3.1.xfm.h1_row, layer3.2.conv2.conv_offset.weight, layer3.2.conv2.conv_offset.bias, layer3.2.cv3.weight, layer3.2.cv3.conv_offset.weight, layer3.2.cv3.conv_offset.bias, layer3.2.xfm.h0_col, layer3.2.xfm.h1_col, layer3.2.xfm.h0_row, layer3.2.xfm.h1_row, layer3.3.conv2.conv_offset.weight, layer3.3.conv2.conv_offset.bias, layer3.3.cv3.weight, layer3.3.cv3.conv_offset.weight, layer3.3.cv3.conv_offset.bias, layer3.3.xfm.h0_col, layer3.3.xfm.h1_col, layer3.3.xfm.h0_row, layer3.3.xfm.h1_row, layer3.4.conv2.conv_offset.weight, layer3.4.conv2.conv_offset.bias, layer3.4.cv3.weight, layer3.4.cv3.conv_offset.weight, layer3.4.cv3.conv_offset.bias, layer3.4.xfm.h0_col, layer3.4.xfm.h1_col, layer3.4.xfm.h0_row, layer3.4.xfm.h1_row, layer3.5.conv2.conv_offset.weight, layer3.5.conv2.conv_offset.bias, layer3.5.cv3.weight, layer3.5.cv3.conv_offset.weight, layer3.5.cv3.conv_offset.bias, layer3.5.xfm.h0_col, layer3.5.xfm.h1_col, layer3.5.xfm.h0_row, layer3.5.xfm.h1_row, layer4.0.xfm.h0_col, layer4.0.xfm.h1_col, layer4.0.xfm.h0_row, layer4.0.xfm.h1_row, layer4.0.cv3.weight, layer4.0.cv3.conv_offset.weight, layer4.0.cv3.conv_offset.bias, layer4.1.conv2.conv_offset.weight, layer4.1.conv2.conv_offset.bias, layer4.1.cv3.weight, layer4.1.cv3.conv_offset.weight, layer4.1.cv3.conv_offset.bias, layer4.1.xfm.h0_col, layer4.1.xfm.h1_col, layer4.1.xfm.h0_row, layer4.1.xfm.h1_row, layer4.2.conv2.conv_offset.weight, layer4.2.conv2.conv_offset.bias, layer4.2.cv3.weight, layer4.2.cv3.conv_offset.weight, layer4.2.cv3.conv_offset.bias, layer4.2.xfm.h0_col, layer4.2.xfm.h1_col, layer4.2.xfm.h0_row, layer4.2.xfm.h1_row, softmaxattention1.se1.fc.0.weight, softmaxattention1.se1.fc.3.weight, softmaxattention1.se2.fc.0.weight, softmaxattention1.se2.fc.3.weight, softmaxattention1.cv1.weight, softmaxattention1.cv1.conv_offset.weight, softmaxattention1.cv1.conv_offset.bias, softmaxattention1.cv2.weight, softmaxattention1.cv2.conv_offset.weight, softmaxattention1.cv2.conv_offset.bias, softmaxattention1.cv3.weight, softmaxattention1.cv3.conv_offset.weight, softmaxattention1.cv3.conv_offset.bias, softmaxattention1.cv5.weight, softmaxattention1.cv5.conv_offset.weight, softmaxattention1.cv5.conv_offset.bias, softmaxattention1.cv6.weight, softmaxattention1.cv6.conv_offset.weight, softmaxattention1.cv6.conv_offset.bias, softmaxattention1.switch.weight, softmaxattention1.switch.bias, softmaxattention1.xfm.h0_col, softmaxattention1.xfm.h1_col, softmaxattention1.xfm.h0_row, softmaxattention1.xfm.h1_row, softmaxattention1.cv7.weight

2022-10-18 11:07:03,860 - mmdet - INFO - Use load_from_torchvision loader
2022-10-18 11:07:04,104 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: xfm.h0_col, xfm.h1_col, xfm.h0_row, xfm.h1_row, conv2.weight, layer5.se1.fc.0.weight, layer5.se1.fc.3.weight, layer5.se2.fc.0.weight, layer5.se2.fc.3.weight, layer5.cv1.weight, layer5.cv2.weight, layer5.cv3.weight, layer5.cv5.weight, layer5.cv6.weight, layer5.switch.weight, layer5.switch.bias, layer5.xfm.h0_col, layer5.xfm.h1_col, layer5.xfm.h0_row, layer5.xfm.h1_row, layer1.0.cv3.weight, layer1.0.xfm.h0_col, layer1.0.xfm.h1_col, layer1.0.xfm.h0_row, layer1.0.xfm.h1_row, layer1.1.cv3.weight, layer1.1.xfm.h0_col, layer1.1.xfm.h1_col, layer1.1.xfm.h0_row, layer1.1.xfm.h1_row, layer1.2.cv3.weight, layer1.2.xfm.h0_col, layer1.2.xfm.h1_col, layer1.2.xfm.h0_row, layer1.2.xfm.h1_row, layer2.0.xfm.h0_col, layer2.0.xfm.h1_col, layer2.0.xfm.h0_row, layer2.0.xfm.h1_row, layer2.0.cv3.weight, layer2.0.rfp_conv.weight, layer2.0.rfp_conv.bias, layer2.1.cv3.weight, layer2.1.xfm.h0_col, layer2.1.xfm.h1_col, layer2.1.xfm.h0_row, layer2.1.xfm.h1_row, layer2.2.cv3.weight, layer2.2.xfm.h0_col, layer2.2.xfm.h1_col, layer2.2.xfm.h0_row, layer2.2.xfm.h1_row, layer2.3.cv3.weight, layer2.3.xfm.h0_col, layer2.3.xfm.h1_col, layer2.3.xfm.h0_row, layer2.3.xfm.h1_row, layer3.0.xfm.h0_col, layer3.0.xfm.h1_col, layer3.0.xfm.h0_row, layer3.0.xfm.h1_row, layer3.0.cv3.weight, layer3.0.rfp_conv.weight, layer3.0.rfp_conv.bias, layer3.1.cv3.weight, layer3.1.xfm.h0_col, layer3.1.xfm.h1_col, layer3.1.xfm.h0_row, layer3.1.xfm.h1_row, layer3.2.cv3.weight, layer3.2.xfm.h0_col, layer3.2.xfm.h1_col, layer3.2.xfm.h0_row, layer3.2.xfm.h1_row, layer3.3.cv3.weight, layer3.3.xfm.h0_col, layer3.3.xfm.h1_col, layer3.3.xfm.h0_row, layer3.3.xfm.h1_row, layer3.4.cv3.weight, layer3.4.xfm.h0_col, layer3.4.xfm.h1_col, layer3.4.xfm.h0_row, layer3.4.xfm.h1_row, layer3.5.cv3.weight, layer3.5.xfm.h0_col, layer3.5.xfm.h1_col, layer3.5.xfm.h0_row, layer3.5.xfm.h1_row, layer4.0.xfm.h0_col, layer4.0.xfm.h1_col, layer4.0.xfm.h0_row, layer4.0.xfm.h1_row, layer4.0.cv3.weight, layer4.0.rfp_conv.weight, layer4.0.rfp_conv.bias, layer4.1.cv3.weight, layer4.1.xfm.h0_col, layer4.1.xfm.h1_col, layer4.1.xfm.h0_row, layer4.1.xfm.h1_row, layer4.2.cv3.weight, layer4.2.xfm.h0_col, layer4.2.xfm.h1_col, layer4.2.xfm.h0_row, layer4.2.xfm.h1_row, softmaxattention1.se1.fc.0.weight, softmaxattention1.se1.fc.3.weight, softmaxattention1.se2.fc.0.weight, softmaxattention1.se2.fc.3.weight, softmaxattention1.cv1.weight, softmaxattention1.cv1.conv_offset.weight, softmaxattention1.cv1.conv_offset.bias, softmaxattention1.cv2.weight, softmaxattention1.cv2.conv_offset.weight, softmaxattention1.cv2.conv_offset.bias, softmaxattention1.cv3.weight, softmaxattention1.cv3.conv_offset.weight, softmaxattention1.cv3.conv_offset.bias, softmaxattention1.cv5.weight, softmaxattention1.cv5.conv_offset.weight, softmaxattention1.cv5.conv_offset.bias, softmaxattention1.cv6.weight, softmaxattention1.cv6.conv_offset.weight, softmaxattention1.cv6.conv_offset.bias, softmaxattention1.switch.weight, softmaxattention1.switch.bias, softmaxattention1.xfm.h0_col, softmaxattention1.xfm.h1_col, softmaxattention1.xfm.h0_row, softmaxattention1.xfm.h1_row, softmaxattention1.cv7.weight

2022-10-18 11:07:04,218 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-10-18 11:07:04,229 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.conv2.weight - torch.Size([64, 76, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.se1.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.se1.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.se2.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.se2.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv1.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv1.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv1.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv2.weight - torch.Size([2048, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv2.conv_offset.weight - torch.Size([18, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv3.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv3.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv3.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv5.weight - torch.Size([4096, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv5.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv5.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv6.weight - torch.Size([2048, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv6.conv_offset.weight - torch.Size([2, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.cv6.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.switch.weight - torch.Size([1, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer5.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.1.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer1.2.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.0.cv3.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.0.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.conv2.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.1.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.1.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.1.cv3.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.1.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.conv2.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.2.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.2.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.2.cv3.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.2.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.conv2.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.3.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer2.3.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.3.cv3.conv_offset.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer2.3.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.0.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.0.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.conv2.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.1.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.1.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.1.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.1.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.conv2.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.2.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.2.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.2.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.2.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.conv2.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.3.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.3.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.3.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.3.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.conv2.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.4.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.4.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.4.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.4.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.conv2.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.5.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer3.5.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.5.cv3.conv_offset.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer3.5.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.0.cv3.conv_offset.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.0.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.conv2.conv_offset.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.1.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.1.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.1.cv3.conv_offset.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.1.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.conv2.conv_offset.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.2.conv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DWWA_Net  

backbone.layer4.2.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.2.cv3.conv_offset.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.layer4.2.cv3.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.se1.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.se1.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.se2.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.se2.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv1.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv1.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv1.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv2.weight - torch.Size([2048, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv2.conv_offset.weight - torch.Size([18, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv3.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv3.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv3.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv5.weight - torch.Size([4096, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv5.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv5.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv6.weight - torch.Size([2048, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv6.conv_offset.weight - torch.Size([2, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv6.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.switch.weight - torch.Size([1, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

backbone.softmaxattention1.cv7.weight - torch.Size([4096, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.4.conv.weight - torch.Size([256, 4096, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.conv2.weight - torch.Size([64, 76, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.se1.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.se1.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.se2.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.se2.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.cv1.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.cv2.weight - torch.Size([2048, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.cv3.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.cv5.weight - torch.Size([4096, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.cv6.weight - torch.Size([2048, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.switch.weight - torch.Size([1, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer5.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.cv3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.cv3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.cv3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.cv3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.se1.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.se1.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.se2.fc.0.weight - torch.Size([128, 2048]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.se2.fc.3.weight - torch.Size([2048, 128]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv1.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv1.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv1.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv2.weight - torch.Size([2048, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv2.conv_offset.weight - torch.Size([18, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv2.conv_offset.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv3.weight - torch.Size([2048, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv3.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv3.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv5.weight - torch.Size([4096, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv5.conv_offset.weight - torch.Size([2, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv5.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv6.weight - torch.Size([2048, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv6.conv_offset.weight - torch.Size([2, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv6.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.switch.weight - torch.Size([1, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_modules.0.softmaxattention1.cv7.weight - torch.Size([4096, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.se1.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.se1.fc.3.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.se2.fc.0.weight - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.se2.fc.3.weight - torch.Size([256, 16]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv1.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv3.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv5.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv6.weight - torch.Size([2048, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv6.conv_offset.weight - torch.Size([2, 8192, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.cv6.conv_offset.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.switch.weight - torch.Size([1, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.softmaxattention.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([21, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([80, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([80]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2022-10-18 11:07:09,809 - mmdet - INFO - Start running, host: zh@zh-Super-Server, work_dir: /home/zh/zhao/DWWA-Net/tools/work_dirs/DWWA_Net
2022-10-18 11:07:09,809 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-10-18 11:07:09,809 - mmdet - INFO - workflow: [('train', 1)], max: 8 epochs
2022-10-18 11:07:09,809 - mmdet - INFO - Checkpoints will be saved to /home/zh/zhao/DWWA-Net/tools/work_dirs/DWWA_Net by HardDiskBackend.
